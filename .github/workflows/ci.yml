name: Continuous Integration

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      chrome:
        image: selenium/standalone-chrome:latest
        options: --shm-size="2g"
        ports:
          - 4444:4444

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.9'

      - name: Set up environment
        run: |
          mkdir -p logs
          mkdir -p data/retraining/chat
          mkdir -p data/retraining/chien
          mkdir -p instance
          mkdir -p artifacts/rejected_images
          mkdir -p models
          mkdir -p tests/test_data

      - name: Install Chrome & ChromeDriver
        run: |
          sudo apt-get update
          # Installer les dépendances compatibles avec Ubuntu 24.04
          sudo apt-get install -y wget unzip xvfb libxi6 libgl1 libnss3 libatk1.0-0 libatk-bridge2.0-0 libcups2 libdrm2 \
            libxkbcommon0 libxcomposite1 libxdamage1 libxfixes3 libxrandr2 libgbm1 libasound2
          
          # Installation de Chrome
          wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
          sudo apt install -y ./google-chrome-stable_current_amd64.deb
          
          # Installation de ChromeDriver
          CHROME_VERSION=$(google-chrome --version | awk '{print $3}' | cut -d. -f1)
          CHROMEDRIVER_VERSION=$(wget -q -O - "https://chromedriver.storage.googleapis.com/LATEST_RELEASE_$CHROME_VERSION")
          wget "https://chromedriver.storage.googleapis.com/${CHROMEDRIVER_VERSION}/chromedriver_linux64.zip"
          unzip chromedriver_linux64.zip
          sudo mv chromedriver /usr/local/bin/
          sudo chmod +x /usr/local/bin/chromedriver
          
          # Vérifier l'installation
          google-chrome --version
          chromedriver --version

      - name: Install Python dependencies
        run: |
          pip install --upgrade pip
          pip install setuptools wheel
          pip install tensorflow
          pip install -r requirements.txt
          pip install -r requirements-test.txt

      - name: Create test image
        run: |
          python -c "
          from PIL import Image
          import numpy as np
          # Create a test cat image
          img = Image.fromarray(np.random.randint(0, 255, (224, 224, 3), dtype=np.uint8))
          img.save('tests/test_data/cat.jpg')
          "

      - name: Create dummy model file
        run: |
          python -c "
          import tensorflow as tf
          from tensorflow import keras
          # Create a simple CNN model for binary classification
          model = keras.Sequential([
              keras.layers.Conv2D(32, (3, 3), activation='relu', input_shape=(128, 128, 3)),
              keras.layers.MaxPooling2D((2, 2)),
              keras.layers.Flatten(),
              keras.layers.Dense(64, activation='relu'),
              keras.layers.Dense(1, activation='sigmoid')
          ])
          model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])
          model.save('models/model.keras')
          print('Dummy model created successfully')
          "

      - name: Run unit tests
        run: |
          pytest test_app.py -v
        env:
          TESTING: 'True'
          FLASK_APP: app.py
          FLASK_ENV: testing
          MODEL_PATH: models/model.keras
          PYTHONPATH: ${{ github.workspace }}

      - name: Start Flask application for functional tests
        run: |
          python -m flask run &
          sleep 5  # Wait for Flask to start
        env:
          FLASK_APP: app.py
          FLASK_ENV: testing
          TESTING: 'True'
          PYTHONPATH: ${{ github.workspace }}
          MODEL_PATH: models/model.keras

      - name: Run functional tests
        run: |
          pytest tests/test_functional.py -v --driver Chrome
        env:
          PYTHONPATH: ${{ github.workspace }}
          TESTING: 'True'
          MODEL_PATH: models/model.keras
          FLASK_APP: app.py
          FLASK_ENV: testing
          SELENIUM_HUB_URL: http://localhost:4444/wd/hub

      - name: Upload test logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-logs
          path: |
            logs/*.log
            .pytest_cache
